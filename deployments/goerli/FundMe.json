{
  "address": "0x4cF2c6D34DaF68e02e49614E4cc769fB14253e6A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotEnoughEth",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundMe__WithdrawFailed",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xba4871319990a237952fa3ab416381fc44a88b5c1632866ba2c77f6fa8c4ca00",
  "receipt": {
    "to": null,
    "from": "0x210a894f934b444065ebefdfc7572e4Ceb5e56C3",
    "contractAddress": "0x4cF2c6D34DaF68e02e49614E4cc769fB14253e6A",
    "transactionIndex": 25,
    "gasUsed": "972240",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xde5f3a2e5c1a6b4463259eea31bcd678008c6bc506b935872743433bb15226a5",
    "transactionHash": "0xba4871319990a237952fa3ab416381fc44a88b5c1632866ba2c77f6fa8c4ca00",
    "logs": [],
    "blockNumber": 7477569,
    "cumulativeGasUsed": "2635950",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 1,
  "solcInputHash": "85dbeac760125b8af8b53f86c3036e1a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotEnoughEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__WithdrawFailed\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"0x_TheL\",\"details\":\"This implements chailink price feeds as library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements chailink price feeds as library\"},\"withdraw()\":{\"details\":\"This implements chailink price feeds as library\"}},\"title\":\"A contrac for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"},\"withdraw()\":{\"notice\":\"This function withdraw funds from this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.8;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\nerror FundMe__NotEnoughEth();\\nerror FundMe__WithdrawFailed();\\n\\n/** @title A contrac for crowd funding\\n *  @author 0x_TheL\\n *  @notice This contract is to demo a sample funding contract\\n *  @dev This implements chailink price feeds as library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256; // library\\n\\n    // State Variables\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n    uint256 public constant MINIMUM_USD = 10 * 1e18;\\n    address private immutable i_owner;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    // Constructor\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // Falbacks\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     *  @notice This function funds this contract\\n     *  @dev This implements chailink price feeds as library\\n     */\\n    function fund() public payable {\\n        // require(\\n        //     msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n        //     \\\"Didn't send enough ETH\\\"\\n        // );\\n\\n        if (msg.value.getConversionRate(s_priceFeed) < MINIMUM_USD) {\\n            revert FundMe__NotEnoughEth();\\n        }\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    /**\\n     *  @notice This function withdraw funds from this contract\\n     *  @dev This implements chailink price feeds as library\\n     */\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        // clean s_funders array\\n        s_funders = new address[](0);\\n\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n\\n        if (!callSuccess) {\\n            revert FundMe__WithdrawFailed();\\n        }\\n        // require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        // warning: mappings can't be in memory.\\n        address[] memory funders = s_funders;\\n\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        // require(success, \\\"Call failed\\\");\\n        if (!success) {\\n            revert FundMe__WithdrawFailed();\\n        }\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getAddressToAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\\n// TRANSFER, send and call methods:\\n\\n// // transfer - if error, revert transaction\\n// payable(msg.sender).transfer(address(this).balance);\\n\\n// // send - if error, return false (bool - true or false)\\n// bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n// require(sendSuccess, \\\"Send failed\\\");\\n\",\"keccak256\":\"0x0acd2c3512d57872c2f1012b77aa22202e5b73972a9be99920e28ed6f6f44274\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.8;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n        // price returns ETH in terms of USD - US$ 1.650,54\\n        // needs to transform USD in ETH\\n        // 1e18 means 1000000000000000000 WEI = 1 ETH\\n        // then is required to cast int256 to uint256\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x9d8c070f60d4c4096f37877f5d2b17ab857e72940495379aeddc8fd5a6622e40\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620011be380380620011be833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c611038620001866000396000818161033301528181610578015281816105c801526107be01526110386000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c1461018e5761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101cb565b005b6100966101cb565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610aaf565b6102e9565b6040516100cc9190610af5565b60405180910390f35b3480156100e157600080fd5b506100ea610331565b005b3480156100f857600080fd5b50610101610568565b60405161010e9190610af5565b60405180910390f35b34801561012357600080fd5b5061012c610574565b6040516101399190610b1f565b60405180910390f35b34801561014e57600080fd5b5061015761059c565b6040516101649190610b99565b60405180910390f35b6101756101cb565b005b34801561018357600080fd5b5061018c6105c6565b005b34801561019a57600080fd5b506101b560048036038101906101b09190610be0565b610881565b6040516101c29190610b1f565b60405180910390f35b678ac7230489e80000610209600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108c990919063ffffffff16565b1015610241576040517f5ed3980900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b6576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610461576000600182815481106103dc576103db610c0d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045990610c6b565b9150506103b9565b50600067ffffffffffffffff81111561047d5761047c610cb4565b5b6040519080825280602002602001820160405280156104ab5781602001602082028036833780820191505090505b50600190805190602001906104c19291906109a5565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104e890610d14565b60006040518083038185875af1925050503d8060008114610525576040519150601f19603f3d011682016040523d82523d6000602084013e61052a565b606091505b5050905080610565576040517ff02e6d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b678ac7230489e8000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461064b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106cf57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610685575b5050505050905060005b81518110156107595760008282815181106106f7576106f6610c0d565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075190610c6b565b9150506106d9565b50600067ffffffffffffffff81111561077557610774610cb4565b5b6040519080825280602002602001820160405280156107a35781602001602082028036833780820191505090505b50600190805190602001906107b99291906109a5565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080090610d14565b60006040518083038185875af1925050503d806000811461083d576040519150601f19603f3d011682016040523d82523d6000602084013e610842565b606091505b505090508061087d576040517ff02e6d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b60006001828154811061089757610896610c0d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108d583610905565b90506000670de0b6b3a764000085836108ee9190610d29565b6108f89190610db2565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561094e57600080fd5b505afa158015610962573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109869190610e70565b5050509150506402540be4008161099d9190610eeb565b915050919050565b828054828255906000526020600020908101928215610a1e579160200282015b82811115610a1d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109c5565b5b509050610a2b9190610a2f565b5090565b5b80821115610a48576000816000905550600101610a30565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a7c82610a51565b9050919050565b610a8c81610a71565b8114610a9757600080fd5b50565b600081359050610aa981610a83565b92915050565b600060208284031215610ac557610ac4610a4c565b5b6000610ad384828501610a9a565b91505092915050565b6000819050919050565b610aef81610adc565b82525050565b6000602082019050610b0a6000830184610ae6565b92915050565b610b1981610a71565b82525050565b6000602082019050610b346000830184610b10565b92915050565b6000819050919050565b6000610b5f610b5a610b5584610a51565b610b3a565b610a51565b9050919050565b6000610b7182610b44565b9050919050565b6000610b8382610b66565b9050919050565b610b9381610b78565b82525050565b6000602082019050610bae6000830184610b8a565b92915050565b610bbd81610adc565b8114610bc857600080fd5b50565b600081359050610bda81610bb4565b92915050565b600060208284031215610bf657610bf5610a4c565b5b6000610c0484828501610bcb565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7682610adc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ca957610ca8610c3c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cfe600083610ce3565b9150610d0982610cee565b600082019050919050565b6000610d1f82610cf1565b9150819050919050565b6000610d3482610adc565b9150610d3f83610adc565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d7857610d77610c3c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610dbd82610adc565b9150610dc883610adc565b925082610dd857610dd7610d83565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e0281610de3565b8114610e0d57600080fd5b50565b600081519050610e1f81610df9565b92915050565b6000819050919050565b610e3881610e25565b8114610e4357600080fd5b50565b600081519050610e5581610e2f565b92915050565b600081519050610e6a81610bb4565b92915050565b600080600080600060a08688031215610e8c57610e8b610a4c565b5b6000610e9a88828901610e10565b9550506020610eab88828901610e46565b9450506040610ebc88828901610e5b565b9350506060610ecd88828901610e5b565b9250506080610ede88828901610e10565b9150509295509295909350565b6000610ef682610e25565b9150610f0183610e25565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610f4057610f3f610c3c565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610f7d57610f7c610c3c565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610fba57610fb9610c3c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610ff757610ff6610c3c565b5b82820290509291505056fea2646970667358221220b7e6d1fcfb9c8471d99cea5c2c42069dcefb736ed2b1c0eb0639cc56d6459eb364736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c1461018e5761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101cb565b005b6100966101cb565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610aaf565b6102e9565b6040516100cc9190610af5565b60405180910390f35b3480156100e157600080fd5b506100ea610331565b005b3480156100f857600080fd5b50610101610568565b60405161010e9190610af5565b60405180910390f35b34801561012357600080fd5b5061012c610574565b6040516101399190610b1f565b60405180910390f35b34801561014e57600080fd5b5061015761059c565b6040516101649190610b99565b60405180910390f35b6101756101cb565b005b34801561018357600080fd5b5061018c6105c6565b005b34801561019a57600080fd5b506101b560048036038101906101b09190610be0565b610881565b6040516101c29190610b1f565b60405180910390f35b678ac7230489e80000610209600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108c990919063ffffffff16565b1015610241576040517f5ed3980900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b6576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610461576000600182815481106103dc576103db610c0d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045990610c6b565b9150506103b9565b50600067ffffffffffffffff81111561047d5761047c610cb4565b5b6040519080825280602002602001820160405280156104ab5781602001602082028036833780820191505090505b50600190805190602001906104c19291906109a5565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104e890610d14565b60006040518083038185875af1925050503d8060008114610525576040519150601f19603f3d011682016040523d82523d6000602084013e61052a565b606091505b5050905080610565576040517ff02e6d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b678ac7230489e8000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461064b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106cf57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610685575b5050505050905060005b81518110156107595760008282815181106106f7576106f6610c0d565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075190610c6b565b9150506106d9565b50600067ffffffffffffffff81111561077557610774610cb4565b5b6040519080825280602002602001820160405280156107a35781602001602082028036833780820191505090505b50600190805190602001906107b99291906109a5565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080090610d14565b60006040518083038185875af1925050503d806000811461083d576040519150601f19603f3d011682016040523d82523d6000602084013e610842565b606091505b505090508061087d576040517ff02e6d3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b60006001828154811061089757610896610c0d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108d583610905565b90506000670de0b6b3a764000085836108ee9190610d29565b6108f89190610db2565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561094e57600080fd5b505afa158015610962573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109869190610e70565b5050509150506402540be4008161099d9190610eeb565b915050919050565b828054828255906000526020600020908101928215610a1e579160200282015b82811115610a1d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109c5565b5b509050610a2b9190610a2f565b5090565b5b80821115610a48576000816000905550600101610a30565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a7c82610a51565b9050919050565b610a8c81610a71565b8114610a9757600080fd5b50565b600081359050610aa981610a83565b92915050565b600060208284031215610ac557610ac4610a4c565b5b6000610ad384828501610a9a565b91505092915050565b6000819050919050565b610aef81610adc565b82525050565b6000602082019050610b0a6000830184610ae6565b92915050565b610b1981610a71565b82525050565b6000602082019050610b346000830184610b10565b92915050565b6000819050919050565b6000610b5f610b5a610b5584610a51565b610b3a565b610a51565b9050919050565b6000610b7182610b44565b9050919050565b6000610b8382610b66565b9050919050565b610b9381610b78565b82525050565b6000602082019050610bae6000830184610b8a565b92915050565b610bbd81610adc565b8114610bc857600080fd5b50565b600081359050610bda81610bb4565b92915050565b600060208284031215610bf657610bf5610a4c565b5b6000610c0484828501610bcb565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7682610adc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ca957610ca8610c3c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cfe600083610ce3565b9150610d0982610cee565b600082019050919050565b6000610d1f82610cf1565b9150819050919050565b6000610d3482610adc565b9150610d3f83610adc565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d7857610d77610c3c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610dbd82610adc565b9150610dc883610adc565b925082610dd857610dd7610d83565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e0281610de3565b8114610e0d57600080fd5b50565b600081519050610e1f81610df9565b92915050565b6000819050919050565b610e3881610e25565b8114610e4357600080fd5b50565b600081519050610e5581610e2f565b92915050565b600081519050610e6a81610bb4565b92915050565b600080600080600060a08688031215610e8c57610e8b610a4c565b5b6000610e9a88828901610e10565b9550506020610eab88828901610e46565b9450506040610ebc88828901610e5b565b9350506060610ecd88828901610e5b565b9250506080610ede88828901610e10565b9150509295509295909350565b6000610ef682610e25565b9150610f0183610e25565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610f4057610f3f610c3c565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610f7d57610f7c610c3c565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610fba57610fb9610c3c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610ff757610ff6610c3c565b5b82820290509291505056fea2646970667358221220b7e6d1fcfb9c8471d99cea5c2c42069dcefb736ed2b1c0eb0639cc56d6459eb364736f6c63430008080033",
  "devdoc": {
    "author": "0x_TheL",
    "details": "This implements chailink price feeds as library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements chailink price feeds as library"
      },
      "withdraw()": {
        "details": "This implements chailink price feeds as library"
      }
    },
    "title": "A contrac for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      },
      "withdraw()": {
        "notice": "This function withdraw funds from this contract"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 75,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}